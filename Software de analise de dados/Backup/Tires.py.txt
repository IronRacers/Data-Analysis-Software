# TIRES ANALYSIS
# ----------------------------------------------------------------------------------------------------------------------#
# LIBRARY IMPORT
# ----------------------------------------------------------------------------------------------------------------------#
import streamlit as st  # Streamlit library
import pandas as pd  # Pandas library is used of export excel data.
import numpy as np
from PIL import Image  # Import Image .png
import plotly.graph_objs as go

# ----------------------------------------------------------------------------------------------------------------------#

# ----------------------------------------------------------------------------------------------------------------------#
# MULTI TAPS IN DASHBOARD
# ---------------
st.title("Tires Performance")
if st.session_state.uploaded_file is None:  # If the workbook is not selected
    st.write('Seleted the WorkBook')

if st.session_state['uploaded_file'] is not None:  # If the workbook is selected
    st.divider()
    tabs = st.tabs(["Surface tires temperature",
                   "Tires temperature KPI", "Tires Pressure"])
    # ----------------------------------------------------------------------------------------------------------------------#
    # ----------------------------------------------------------------------------------------------------------------------#
    # TIRES TANGENT
    # ----------------------------------------------------------------------------------------------------------------------#
    Tires_Temp_Tangent = 85
    Tires_Pressu_Tangent = 28
    Variation = 5
    # ----------------------------------------------------------------------------------------------------------------------#

    with tabs[0]:  # If Weight Information
        st.subheader("Tangent")
        selected_drivers = st.session_state.selected_drivers
        tags = [st.session_state.get(f'Tag_{driver}')
                for driver in selected_drivers]

        for driver, tag in zip(selected_drivers, tags):

            Colune1, Colune2, Colune3, Colune4 = st.columns(4)
            with Colune1:
                st.markdown(
                    f"""
                                    <div style="
                                        display: inline-block;
                                        padding: 8px 20px;
                                        margin-top: 0px;
                                        background-color: #666262;
                                        border-radius: 4px;
                                        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);                                    font-size: 16px;
                                        color: #fcfcfc;
                                        text-align: center;
                                    ">
                                        Drive: {
                        st.session_state['General_Information'].loc[tag - 1, ('Piloto')]}
                                    </div>
                                    """,
                    unsafe_allow_html=True
                )
                st.markdown(
                    '<div style="margin-top: 10px;"></div>', unsafe_allow_html=True)
                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                Temperature (℃): {Tires_Temp_Tangent}
                            </div>
                            """,
                    unsafe_allow_html=True
                )
            with Colune2:
                st.markdown(
                    '<div style="margin-top: 60px;"></div>', unsafe_allow_html=True)
                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                Variation (℃): +-{Variation}
                            </div>
                            """,
                    unsafe_allow_html=True
                )

            with Colune3:
                st.markdown(
                    '<div style="margin-top: 60px;"></div>', unsafe_allow_html=True)
                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                Camber Front (°):{st.session_state['Setup'].loc[tag -
                                                                                1, ('Camber front')]}
                            </div>
                            """,
                    unsafe_allow_html=True
                )

            with Colune4:
                st.markdown(
                    '<div style="margin-top: 60px;"></div>', unsafe_allow_html=True)
                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                Camber Rear (°):{st.session_state['Setup'].loc[tag-1, ('Camber rear')]}
                            </div>
                            """,
                    unsafe_allow_html=True
                )
                st.markdown(
                    '<div style="margin-top: 20px;"></div>', unsafe_allow_html=True)

        st.divider()
        st.subheader("Tires behavior")
        # Estrutura de dados de exemplo (substitua pelos dados reais)
        SurfaceTires = ['Outside', 'Middle', 'Inside']

        # Dicionário de cores para os pilotos (adicione mais pilotos se necessário)
        pilot_colors = {
            "Jenifer": "blue",
            "Muniz": "red",
            "Rafael": "green",
            "Piloto4": "purple",
            # Adicione mais pilotos e cores conforme necessário
        }

        # Criar uma lista para armazenar todos os dados dos pilotos
        data = []

        for driver, tag in zip(selected_drivers, tags):
            List_Rear_left_Temp_Out = [
                st.session_state['Tires'].loc[tag-1,
                                              ('Temp. Pneu Out', 'Rear left Temp. Out', surface)]
                for surface in SurfaceTires
            ]
            List_Rear_Rigth_Temp_Out = [
                st.session_state['Tires'].loc[tag-1,
                                              ('Temp. Pneu Out', 'Rear Rigth Temp. Out', surface)]
                for surface in SurfaceTires
            ]
            List_Front_Left_Temp_Out = [
                st.session_state['Tires'].loc[tag-1,
                                              ('Temp. Pneu Out', 'Front left Temp. Out', surface)]
                for surface in SurfaceTires
            ]
            List_Front_Rigth_Temp_Out = [
                st.session_state['Tires'].loc[tag-1,
                                              ('Temp. Pneu Out', 'Front Right Temp. Out', surface)]
                for surface in SurfaceTires
            ]

            data.append({
                "Surface": SurfaceTires,
                "Rear_left": List_Rear_left_Temp_Out,
                "Rear_Rigth": List_Rear_Rigth_Temp_Out,
                "Front_Left": List_Front_Left_Temp_Out,
                "Front_Rigth": List_Front_Rigth_Temp_Out,
                "Driver": [driver] * len(SurfaceTires)
            })

        # Concatenar todos os dados dos pilotos em um DataFrame
        df_combined = pd.concat([pd.DataFrame(d) for d in data])

        # Função para criar gráficos individuais para cada pneu
        def plot_tire_temperature(tire_column, tire_name):
            fig = go.Figure()
            for driver in df_combined['Driver'].unique():
                driver_data = df_combined[df_combined['Driver'] == driver]
                # Usa a cor do dicionário pilot_colors para o piloto
                # Define "black" se o piloto não estiver no dicionário
                color = pilot_colors.get(driver, "black")
                fig.add_trace(go.Scatter(
                    x=driver_data['Surface'],
                    y=driver_data[tire_column],
                    fill='tozeroy',
                    name=driver,
                    line=dict(color=color)  # Define a cor da linha
                ))

            # Configurações do layout
            fig.update_layout(
                title=f"{tire_name} ",
                xaxis_title="Surface (Out - Mid - In)",
                yaxis_title="Temperature",
                legend_title="Driver",
            )
            return fig

        # Criar colunas para exibir gráficos lado a lado
        col1, col2, col3, col4 = st.columns(4)

        # Exibir gráficos em colunas
        with col1:
            st.plotly_chart(plot_tire_temperature(
                "Rear_left", "Rear Left"))

        with col2:
            st.plotly_chart(plot_tire_temperature(
                "Rear_Rigth", "Rear Right"))

        with col3:
            st.plotly_chart(plot_tire_temperature(
                "Front_Left", "Front Left"))

        with col4:
            st.plotly_chart(plot_tire_temperature(
                "Front_Rigth", "Front Right"))

    with tabs[1]:
        for i, driver in enumerate(st.session_state.selected_drivers):
            Tag = st.session_state.get(f'Tag_{driver}')

            if i >= 1:
                st.divider()
            st.markdown(
                f"""
                                    <div style="
                                        display: inline-block;
                                        padding: 8px 20px;
                                        margin-top: 0px;
                                        background-color: #666262;
                                        border-radius: 4px;
                                        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);                                    font-size: 16px;
                                        color: #fcfcfc;
                                        text-align: center;
                                    ">
                                        Drive: {
                    st.session_state['General_Information'].loc[Tag - 1, ('Piloto')]}
                                    </div>
                                    """,
                unsafe_allow_html=True
            )
            st.markdown(
                '<div style="margin-top: 21px;"></div>', unsafe_allow_html=True)
            st.subheader("Inflation")

            # ----------------------------------------------------------------------------------------------------------------------#
            # TIRES FILTER OF TEMP. OUT
            # ----------------------------------------------------------------------------------------------------------------------#

            SurfaceTires = ['Outside', 'Middle',
                            'Inside']  # List of surface tires
            List_Rear_left_Temp_Out = []  # List of Surface temp. after the sprint
            List_Rear_Rigth_Temp_Out = []  # List of Surface temp. after the sprint
            List_Front_Left_Temp_Out = []  # List of Surface temp. after the sprint
            List_Front_Rigth_Temp_Out = []  # List of Surface temp. after the sprint

            for i in range(len(SurfaceTires)):  # Return the list of tires sufarce
                List_Rear_left_Temp_Out.append(
                    st.session_state['Tires'].loc[Tag-1, ('Temp. Pneu Out', 'Rear left Temp. Out', SurfaceTires[i])])
                List_Rear_Rigth_Temp_Out.append(
                    st.session_state['Tires'].loc[Tag-1, ('Temp. Pneu Out', 'Rear Rigth Temp. Out', SurfaceTires[i])])
                List_Front_Left_Temp_Out.append(
                    st.session_state['Tires'].loc[Tag-1, ('Temp. Pneu Out', 'Front left Temp. Out', SurfaceTires[i])])
                List_Front_Rigth_Temp_Out.append(
                    st.session_state['Tires'].loc[Tag-1, ('Temp. Pneu Out', 'Front Right Temp. Out', SurfaceTires[i])])

            Df_Surface_Temp_Out = pd.DataFrame(  # Save in dataframe all tires sufaces
                {
                    "Rear_left": List_Rear_left_Temp_Out,
                    "Rear_Rigth": List_Rear_Rigth_Temp_Out,
                    "Front_Left": List_Front_Left_Temp_Out,
                    "Front_Rigth": List_Front_Rigth_Temp_Out,
                    "Out - Mid - In": [1, 2, 3],
                }
            )
            # Calculed of inflame tires
            Inflame_Rear_left_Temp = (List_Rear_left_Temp_Out[1]-List_Rear_left_Temp_Out[0])-(
                List_Rear_left_Temp_Out[2]-List_Rear_left_Temp_Out[1])
            Inflame_Rear_Rigth_Temp = (List_Rear_Rigth_Temp_Out[1]-List_Rear_Rigth_Temp_Out[0])-(
                List_Rear_Rigth_Temp_Out[2]-List_Rear_Rigth_Temp_Out[1])
            Inflame_Front_left_Temp = (List_Front_Left_Temp_Out[1]-List_Front_Left_Temp_Out[0])-(
                List_Front_Left_Temp_Out[2]-List_Front_Left_Temp_Out[1])
            Inflame_Front_Rigth_Temp = (List_Front_Rigth_Temp_Out[1]-List_Front_Rigth_Temp_Out[0])-(
                List_Front_Rigth_Temp_Out[2]-List_Front_Rigth_Temp_Out[1])

            # Inflame Indicator
            if Inflame_Rear_left_Temp == 0:
                Ind_Inflame_Rear_left_Temp = "Ok 🟢"
            elif Inflame_Rear_left_Temp > 0:
                Ind_Inflame_Rear_left_Temp = "Over 🔴"
            else:
                Ind_Inflame_Rear_left_Temp = "Under 🔵"

            # Inflame Indicator
            if Inflame_Rear_Rigth_Temp == 0:
                Ind_Inflame_Rear_Rigth_Temp = "Ok 🟢"
            elif Inflame_Rear_Rigth_Temp > 0:
                Ind_Inflame_Rear_Rigth_Temp = "Over 🔴"
            else:
                Ind_Inflame_Rear_Rigth_Temp = "Under 🔵"

            # Inflame Indicator
            if Inflame_Front_left_Temp == 0:
                Ind_Inflame_Front_left_Temp = "Ok 🟢"
            elif Inflame_Front_left_Temp > 0:
                Ind_Inflame_Front_left_Temp = "Over 🔴"
            else:
                Ind_Inflame_Front_left_Temp = "Under 🔵"

            # Inflame Indicator
            if Inflame_Front_Rigth_Temp == 0:
                Ind_Inflame_Front_Rigth_Temp = "Ok 🟢"
            elif Inflame_Front_Rigth_Temp > 0:
                Ind_Inflame_Front_Rigth_Temp = "Over 🔴"
            else:
                Ind_Inflame_Front_Rigth_Temp = "Under 🔵"

            Colune1, Colune2, Colune3, Colune4 = st.columns(4)
            with Colune1:
                st.text("Rear Left")

                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Ind_Inflame_Rear_left_Temp}
                            </div>
                            """,
                    unsafe_allow_html=True
                )

            with Colune2:
                st.text("Rear Rigth")
                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Ind_Inflame_Rear_Rigth_Temp}
                            </div>
                            """,
                    unsafe_allow_html=True
                )
            with Colune3:
                st.text("Front Left")

                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Ind_Inflame_Front_left_Temp}
                            </div>
                            """,
                    unsafe_allow_html=True
                )
            with Colune4:
                st.text("Front Rigth")
                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Ind_Inflame_Front_Rigth_Temp}
                            </div>
                            """,
                    unsafe_allow_html=True
                )

            # ----------------------------------------------------------------------------------------------------------------------#
            # TIRES WINDOWS TEMPERATURE
            # ----------------------------------------------------------------------------------------------------------------------#
            st.divider()
            st.subheader("Window")
            # Calculated the mean
            Mean_Rear_left = round(
                Df_Surface_Temp_Out['Rear_left'].mean(), 1)
            Mean_Rear_Rigth = round(
                Df_Surface_Temp_Out['Rear_Rigth'].mean(), 1)
            Mean_Front_Left = round(
                Df_Surface_Temp_Out['Front_Left'].mean(), 1)
            Mean_Front_Rigth = round(
                Df_Surface_Temp_Out['Front_Rigth'].mean(), 1)

            # Calculated the range tamperature
            Range_Temp_Max = Tires_Temp_Tangent*0.05 + Tires_Temp_Tangent
            Range_Temp_Min = -Tires_Temp_Tangent*0.05 + Tires_Temp_Tangent

            # Windows Indicator
            if Mean_Rear_left < Range_Temp_Min:
                Ind_Mean_Rear_left = "Cold 🔵"
            elif Mean_Rear_left > Range_Temp_Max:
                Ind_Mean_Rear_left = "Hot 🔴"
            else:
                Ind_Mean_Rear_left = "Ok 🟢"

            # Windows Indicator
            if Mean_Rear_Rigth < Range_Temp_Min:
                Ind_Mean_Rear_Rigth = "Cold 🔵"
            elif Mean_Rear_Rigth > Range_Temp_Max:
                Ind_Mean_Rear_Rigth = "Hot 🔴"
            else:
                Ind_Mean_Rear_Rigth = "Ok 🟢"

            # Windows Indicator
            if Mean_Front_Left < Range_Temp_Min:
                Ind_Mean_Front_Left = "Cold 🔵"
            elif Mean_Front_Left > Range_Temp_Max:
                Ind_Mean_Front_Left = "Hot 🔴"
            else:
                Ind_Mean_Front_Left = "Ok 🟢"

            # Windows Indicator
            if Mean_Front_Rigth < Range_Temp_Min:
                Ind_Mean_Front_Rigth = "Cold 🔵"
            elif Mean_Front_Rigth > Range_Temp_Max:
                Ind_Mean_Front_Rigth = "Hot 🔴"
            else:
                Ind_Mean_Front_Rigth = "Ok 🟢"

            # Dashboard viewer
            Colune1, Colune2, Colune3, Colune4 = st.columns(4)
            with Colune1:
                st.text("Rear Left")

                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Mean_Rear_left} ℃ {Ind_Mean_Rear_left}
                            </div>
                            """,
                    unsafe_allow_html=True
                )

            with Colune2:
                st.text("Rear Rigth")
                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Mean_Rear_Rigth} ℃ {Ind_Mean_Rear_Rigth}
                            </div>
                            """,
                    unsafe_allow_html=True
                )
            with Colune3:
                st.text("Front Left")

                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Mean_Front_Left} ℃ {Ind_Mean_Front_Left}
                            </div>
                            """,
                    unsafe_allow_html=True
                )
            with Colune4:
                st.text("Front Rigth")
                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Mean_Front_Rigth} ℃ {Ind_Mean_Front_Rigth}
                            </div>
                            """,
                    unsafe_allow_html=True
                )
            # ----------------------------------------------------------------------------------------------------------------------#

            # ----------------------------------------------------------------------------------------------------------------------#
            # TIRES WINDOWS TEMPERATURE
            # ----------------------------------------------------------------------------------------------------------------------#
            st.divider()
            st.subheader("Camber")

            # Calculed of camber tires
            Camber_Rear_left_Temp = (
                List_Rear_left_Temp_Out[2]-List_Rear_left_Temp_Out[0])
            Camber_Rear_Rigth_Temp = (
                List_Rear_Rigth_Temp_Out[2]-List_Rear_Rigth_Temp_Out[0])
            Camber_Front_left_Temp = (
                List_Front_Left_Temp_Out[2]-List_Front_Left_Temp_Out[0])
            Camber_Front_Rigth_Temp = (
                List_Front_Rigth_Temp_Out[2]-List_Front_Rigth_Temp_Out[0])

            # Camber Indicator
            if Camber_Rear_left_Temp == st.session_state['Setup'].loc[Tag-1, ('Camber rear')]:
                Ind_Camber_Rear_left_Temp = "Ok 🟢"
            elif Camber_Rear_left_Temp > st.session_state['Setup'].loc[Tag-1, ('Camber rear')]:
                Ind_Camber_Rear_left_Temp = "Too Much 🔴"
            else:
                Ind_Camber_Rear_left_Temp = "Too Little 🔵"

            # Camber Indicator
            if Camber_Rear_Rigth_Temp == st.session_state['Setup'].loc[Tag-1, ('Camber rear')]:
                Ind_Camber_Rear_Rigth_Temp = "Ok 🟢"
            elif Camber_Rear_Rigth_Temp > st.session_state['Setup'].loc[Tag-1, ('Camber rear')]:
                Ind_Camber_Rear_Rigth_Temp = "Too Much 🔴"
            else:
                Ind_Camber_Rear_Rigth_Temp = "Too Little 🔵"

            # Camber Indicator
            if Camber_Front_left_Temp == st.session_state['Setup'].loc[Tag-1, ('Camber front')]:
                Ind_Camber_Front_left_Temp = "Ok 🟢"
            elif Camber_Front_left_Temp > st.session_state['Setup'].loc[Tag-1, ('Camber front')]:
                Ind_Camber_Front_left_Temp = "Too Much 🔴"
            else:
                Ind_Camber_Front_left_Temp = "Too Little 🔵"

            # Camber Indicator
            if Camber_Front_Rigth_Temp == st.session_state['Setup'].loc[Tag-1, ('Camber front')]:
                Ind_Camber_Front_Rigth_Temp = "Ok 🟢"
            elif Camber_Front_Rigth_Temp > st.session_state['Setup'].loc[Tag-1, ('Camber front')]:
                Ind_Camber_Front_Rigth_Temp = "Too Much 🔴"
            else:
                Ind_Camber_Front_Rigth_Temp = "Too Little 🔵"

            # Dashboard viewer
            Colune1, Colune2, Colune3, Colune4 = st.columns(4)
            with Colune1:
                st.text("Rear Left")

                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Camber_Rear_left_Temp}° {Ind_Camber_Rear_left_Temp}
                            </div>
                            """,
                    unsafe_allow_html=True
                )

            with Colune2:
                st.text("Rear Rigth")
                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Camber_Rear_Rigth_Temp}° {Ind_Camber_Rear_Rigth_Temp}
                            </div>
                            """,
                    unsafe_allow_html=True
                )
            with Colune3:
                st.text("Front Left")

                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Camber_Front_left_Temp}° {Ind_Camber_Front_left_Temp}
                            </div>
                            """,
                    unsafe_allow_html=True
                )
            with Colune4:
                st.text("Front Rigth")
                st.markdown(
                    f"""
                            <div style="
                                display: inline-block;
                                padding: 8px 20px;
                                margin-top: 0px;
                                background-color: #666262;
                                border-radius: 4px;
                                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                font-size: 16px;
                                color: #fcfcfc;
                                text-align: center;
                            ">
                                {Camber_Front_Rigth_Temp}° {Ind_Camber_Front_Rigth_Temp}
                            </div>
                            """,
                    unsafe_allow_html=True
                )
